<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<security:http auto-config="false" use-expressions="true"
		access-denied-page="/denied.html" entry-point-ref="authenticationEntryPoint">

		<security:intercept-url pattern="/resources/css/*" access="permitAll"/>
		<security:intercept-url pattern="/resources/js/*" access="permitAll"/>
		<security:intercept-url pattern="/resources/images/**" access="permitAll"/>
		<security:intercept-url pattern="/login.html" access="permitAll"/>
		<security:intercept-url pattern="/index.html" access="permitAll"/>
		<security:intercept-url pattern="/.*" access="permitAll" />
		<security:logout invalidate-session="true"
			logout-success-url="/index.html" logout-url="/logout.html" />

		<!-- Querying the SessionRegistry for currently authenticated users and 
			their sessions http://static.springsource.org/spring-security/site/docs/3.1.x/reference/session-mgmt.html#list-authenticated-principals -->
		<security:custom-filter ref="authenticationFilter"
			position="FORM_LOGIN_FILTER" />
		<security:custom-filter ref="concurrencyFilter"
			position="CONCURRENT_SESSION_FILTER" />
		<security:session-management session-authentication-strategy-ref="sas">
	    </security:session-management>
	</security:http>

	<bean id="authenticationFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
		p:sessionAuthenticationStrategy-ref="sas" p:authenticationManager-ref="authenticationManager"
		p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
		p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler" />

	<bean id="customAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
		p:defaultFailureUrl="/login.html?error=true" />

	<bean id="customAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
		p:defaultTargetUrl="/index.html" />

	<!-- The AuthenticationEntryPoint is responsible for redirecting the user 
		to a particular page, like a login page, whenever the server sends back a 
		response requiring authentication -->
	<bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
		p:loginFormUrl="/index.html#loginModal" />

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			user-service-ref="userService">
			<security:password-encoder hash="sha-256" />
		</security:authentication-provider>
	</security:authentication-manager>

	<bean id="userService" class="lt.nfq.conference.service.security.UserLoginService" />

	<!-- Filter required by concurrent session handling package The ConcurrentSessionFilter 
		requires two properties, sessionRegistry, which generally points to an instance 
		of SessionRegistryImpl, and expiredUrl, which points to the page to display 
		when a session has expired. See: http://static.springsource.org/spring-security/site/docs/3.1.x/reference/session-mgmt.html#list-authenticated-principals -->
	<bean id="concurrencyFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter"
		p:sessionRegistry-ref="sessionRegistry" p:expiredUrl="/login.html" />

	<!-- Defines a concrete concurrent control strategy Checks whether the user 
		in question should be allowed to proceed, by comparing the number of sessions 
		they already have active with the configured maximumSessions value. The SessionRegistry 
		is used as the source of data on authenticated users and session data. See: 
		http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/web/authentication/session/ConcurrentSessionControlStrategy.html -->
	<bean id="sas"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy"
		p:maximumSessions="1">
		<constructor-arg name="sessionRegistry" ref="sessionRegistry" />
	</bean>

	<!-- Maintains a registry of SessionInformation instances See: http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/session/SessionRegistry.html -->
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
</beans>